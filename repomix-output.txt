This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-27T20:31:42.250Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  api/
    chat/
      route.ts
  docs/
    current-progress.md
    project-idea.md
  globals.css
  layout.tsx
  page.tsx
components/
  chat/
    BookReviewCard.tsx
    ChatInput.tsx
    ChatInterface.tsx
    ChatMessage.tsx
  ui/
    avatar.tsx
    badge.tsx
    button.tsx
    card.tsx
    input.tsx
    scroll-area.tsx
    textarea.tsx
lib/
  validators/
    book-data.ts
  utils.ts
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
types/
  chat.ts
.eslintrc.json
.gitignore
components.json
next.config.js
package.json
postcss.config.js
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/api/chat/route.ts
================
import { OpenAI } from 'openai';
import { Pinecone } from '@pinecone-database/pinecone';
import { streamText } from 'ai';
import { openai as aiopenai } from '@ai-sdk/openai';

interface ReviewMetadata {
  bookTitle: string;
  authorName: string;
  grade: string;
  sensuality: string;
  url?: string;
  amazonUrl?: string;
  asin?: string;
  chunkType?: string;
  bookTypes?: string[];
  reviewDate?: string;
  text: string;
  comments?: {
    count: number;
    latest?: Array<{
      commentAuthor: string;
      commentContent: string;
      commentDate?: string;
    }>;
  };
}

interface BookDetails {
  title: string;
  author: string;
  grade: string;
  sensuality: string;
  url?: string;
  asin?: string;
  bookTypes?: string[];
  reviewDate?: string;
  comments?: number;
  score?: number;
}

const openaiClient = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

const pineconeClient = new Pinecone({
  apiKey: process.env.PINECONE_API_KEY!,
});

export const runtime = 'edge';

export async function POST(req: Request) {
  try {
    const { messages } = await req.json();
    const lastMessage = messages[messages.length - 1];

    const embeddingResponse = await openaiClient.embeddings.create({
      model: "text-embedding-3-small",
      input: lastMessage.content,
      encoding_format: "float",
    });

    const embedding = embeddingResponse.data[0].embedding;

    const index = pineconeClient.index(process.env.PINECONE_INDEX_NAME!);
    const queryResponse = await index.query({
      vector: embedding,
      topK: 5,  // Adjust based on query type
      includeMetadata: true,
    });

    // Process matches and build review context
    const indexedBooks = new Map<string, BookDetails>();
    queryResponse.matches?.forEach((match) => {
      const meta = match.metadata as unknown as ReviewMetadata;
      if (meta?.bookTitle) {
        indexedBooks.set(meta.bookTitle, {
          title: meta.bookTitle,
          author: meta.authorName,
          grade: meta.grade,
          sensuality: meta.sensuality,
          url: meta.url,
          asin: meta.asin,
          bookTypes: meta.bookTypes,
          reviewDate: meta.reviewDate,
          comments: meta.comments?.count || 0,
          score: match.score,
        });
      }
    });

    const relevantContent = queryResponse.matches
      ?.filter((match) => match.score && match.score > 0.5)
      ?.map((match) => {
        const metadata = match.metadata as unknown as ReviewMetadata;
        const comments = metadata.comments?.latest
          ?.map((c) => `${c.commentAuthor}: ${c.commentContent}`)
          .join('\n') || '';

        const buyLink = metadata.asin
          ? `Amazon ASIN: ${metadata.asin}`
          : 'Buy link not available';

        return `
Book: "${metadata.bookTitle}" by ${metadata.authorName}
Grade: ${metadata.grade}
Sensuality: ${metadata.sensuality}
Book Types: ${metadata.bookTypes?.join(', ') || 'Not specified'}
Review Link: ${metadata.url || 'Not available'}
${buyLink}
Review Date: ${metadata.reviewDate || 'Not specified'}
${metadata.comments?.count ? `Number of Comments: ${metadata.comments.count}` : ''}
${comments ? `\nReader Comments:\n${comments}` : ''}
Content: ${metadata.text}
        `.trim();
      })
      .join('\n\n---\n\n');

    // Convert indexed books to a readable format for the prompt
    const currentBooks = Array.from(indexedBooks.values())
      .map(
        (book) =>
          `${book.title} by ${book.author} (Grade: ${book.grade}, Sensuality: ${book.sensuality}, Types: ${book.bookTypes?.join(', ')})`
      )
      .join('\n');

    const systemPrompt = `You are Minerva, an AI assistant for All About Romance (AAR). You help users discover romance books based on the provided review data.

KEY BEHAVIORS:
1. Always provide complete book data for any book you mention
2. Only reference books from the provided review data
3. Be conversational but precise
4. Focus on helping users find books they'll enjoy

RESPONSE STRUCTURE:
1. When mentioning ANY book, start with this exact format:
<book-data>
{
  "books": [
    {
      "title": "[EXACT TITLE]",
      "author": "[EXACT AUTHOR]",
      "grade": "[EXACT GRADE]",
      "sensuality": "[EXACT RATING]",
      "bookTypes": ["EXACT TYPES"],
      "asin": "[EXACT ASIN]",
      "reviewUrl": "[EXACT URL]",
      "featuredImage": "/api/placeholder/400/320"
    }
  ]
}
</book-data>

2. Then provide your friendly, helpful response.

QUERY HANDLING:

1. SPECIFIC BOOK QUERIES
"What did readers think about [Book]?"
- Show exact review details and grade
- Include actual reader comments
- Provide review and buy links

2. RECOMMENDATION QUERIES
"Books similar to [Title]" or "Books with [Criteria]"
- Match based on book types, grades, themes
- Explain why each book is recommended
- Include purchase options

3. READER SENTIMENT
"What are readers excited about?"
- Focus on highly-rated recent reviews
- Include reader comments and grades
- Highlight notable discussions

4. DISCOVERY QUERIES
"Show me [genre/theme] romances"
- Filter by requested criteria
- Sort by relevance/grade
- Explain what makes each book notable

Available Reviews:
${currentBooks}

Review Content:
${relevantContent}

Remember: Only discuss books from the provided data. If you don't have enough information, say so clearly.`;

    const result = await streamText({
      model: aiopenai('gpt-4-1106-preview'),
      messages,
      system: systemPrompt,
      temperature: 0.7,
      maxTokens: 1000,
    });

    return result.toDataStreamResponse();
  } catch (error) {
    console.error('Error in chat route:', error instanceof Error ? error.message : error);
    return new Response(
      JSON.stringify({
        error: 'Internal Server Error',
        details: error instanceof Error ? error.message : 'Unknown error',
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  }
}

================
File: app/docs/current-progress.md
================
# Current Progress Report - Project Minerva

## Current Implementation Overview

### Frontend Implementation
- Built using Next.js 14 with TypeScript and App Router
- Implemented a clean, responsive chat interface using:
  - Shadcn/ui components for consistent design
  - Tailwind CSS for styling
  - Custom fonts (DM Serif Text for headers, Inter for body text)
- Created reusable React components:
  - `ChatInterface`: Main chat container with message history
  - `ChatMessage`: Individual message display with user/bot avatars
  - `ChatInput`: Expandable textarea with send button

### Chat Implementation
- Integrated Vercel AI SDK for streaming responses
- Set up OpenAI integration with GPT-4
- Implemented basic system prompt for romance book expertise
- Added real-time message streaming
- Included loading states and error handling

### UI/UX Features
- Responsive design that works across devices
- Message history with automatic scrolling
- Visual distinction between user and assistant messages
- Smooth animations and transitions
- Error state handling
- Loading indicators

### Project Structure
- Organized component architecture
- Type-safe implementation with TypeScript
- Clear separation of concerns:
  - UI components in `/components`
  - API routes in `/app/api`
  - Types in `/types`
  - Utility functions in `/lib`

## What's Missing

### 1. RAG Implementation
- No connection to WordPress content
- No vector database integration
- No document retrieval system
- No context-aware responses based on website content

### 2. WordPress Integration
- No WordPress plugin
- No data synchronization
- No authentication integration
- No admin interface

### 3. Advanced Features
- No conversation history persistence
- No user preference tracking
- No recommendation engine
- No content filtering capabilities
- No analytics or monitoring

## Deployment Status
- Successfully deployed to Vercel
- Basic production environment setup
- No monitoring or logging implementation

## Next Steps Recommendation

### Priority Order
1. **Implement RAG System First**
   - This is the core functionality that will make the chatbot useful
   - Enables content-aware responses
   - Foundation for all other features

2. **WordPress Plugin Second**
   - After RAG system is working
   - Ensures we have a working product before integration
   - Allows for proper testing before WordPress deployment

### Reasoning
- RAG implementation is the core value proposition
- Better to have a working, knowledgeable chatbot before WordPress integration
- Allows for proper testing and refinement of the core functionality
- Easier to debug and optimize in isolation

================
File: app/docs/project-idea.md
================
# Project Minerva: AI-Powered Romance Book Review Chatbot

## Project Overview
Project Minerva is an intelligent chatbot system designed specifically for All About Romance, a WordPress-based romance book review platform. The chatbot aims to enhance user engagement by providing natural, context-aware conversations about romance books, reviews, and recommendations.

## Core Objectives
1. Create an intuitive, conversational interface for exploring romance book reviews
2. Integrate seamlessly with existing WordPress infrastructure
3. Provide accurate, context-aware responses to user queries
4. Scale efficiently to handle growing user interactions
5. Maintain conversation history and context for meaningful interactions

## Key Features

### 1. Natural Language Understanding
- Process and understand user queries about books, authors, and reviews
- Handle complex questions about plot elements, character dynamics, and themes
- Support follow-up questions and maintain conversation context
- Example queries:
  - "What are the best enemies-to-lovers romances from 2024?"
  - "Find me books similar to 'The Love Hypothesis'"
  - "What did reviewers say about the character development in this book?"

### 2. Review Integration
- Access and analyze existing book reviews from the WordPress database
- Incorporate user comments and ratings into responses
- Provide balanced perspectives from multiple reviews
- Generate comprehensive summaries of review content

### 3. Recommendation Engine
- Suggest similar books based on user preferences
- Filter recommendations by subgenre, tropes, heat level, etc.
- Consider review ratings and user feedback in suggestions
- Provide personalized reading lists

### 4. WordPress Integration
- Seamless embedding in WordPress pages and posts
- Real-time access to review database
- Consistent styling with website theme
- Mobile-responsive design

## Technical Architecture

### Frontend Stack
1. **Next.js 14**
   - App Router for routing
   - Server Components for optimal performance
   - API Routes for backend functionality
   - Tailwind CSS for styling
   - TypeScript for type safety

2. **UI Components**
   - Shadcn/ui for core components
   - Custom chat interface
   - Loading states and animations
   - Error handling and feedback

### Backend Services

1. **LangChain Framework**
   - RAG (Retrieval-Augmented Generation) implementation
   - Conversation chain management
   - Context window optimization
   - Memory management for chat history

2. **Vector Database (Pinecone)**
   - Store and retrieve review embeddings
   - Semantic search capabilities
   - Real-time updates for new content
   - Efficient similarity search

3. **WordPress Integration**
   - WPGraphQL plugin for data access
   - Custom post type for reviews
   - Real-time content synchronization
   - User authentication integration

### Data Flow
1. Content Processing
   ```
   WordPress Reviews → Vector Embeddings → Pinecone DB
   ```

2. Query Processing
   ```
   User Query → LangChain → Vector Search → LLM → Response
   ```

3. Context Management
   ```
   Chat History → Memory System → Context Window → Response Generation
   ```

## Development Phases

### Phase 1: Foundation
- Set up Next.js project structure
- Implement basic chat interface
- Configure WordPress GraphQL integration
- Set up development and staging environments

### Phase 2: Core Features
- Implement RAG system with LangChain
- Set up vector database and embeddings
- Create basic conversation flows
- Develop review parsing system

### Phase 3: Enhancement
- Add advanced query handling
- Implement recommendation system
- Optimize response generation
- Add error handling and fallbacks

### Phase 4: WordPress Plugin
- Develop WordPress plugin
- Create admin interface
- Implement configuration options
- Add analytics and monitoring

## Deployment Strategy
1. **Frontend**
   - Vercel for Next.js application
   - Automated deployments from GitHub
   - Environment variable management
   - Performance monitoring

2. **Backend Services**
   - Serverless functions for API endpoints
   - Vector database hosting
   - WordPress plugin distribution
   - Backup and recovery systems

## Monitoring and Maintenance
- Track user interactions and feedback
- Monitor system performance
- Regular updates to vector database
- Continuous improvement of responses

## Security Considerations
- User data protection
- API key management
- Rate limiting
- Error logging and monitoring
- GDPR compliance

## Future Enhancements
1. User preference learning
2. Multi-language support
3. Voice interface
4. Advanced analytics dashboard
5. Integration with e-commerce systems

## Project Constraints
- API rate limits
- Content freshness
- Response time requirements
- Resource optimization
- Cost management

## Success Metrics
1. User engagement rates
2. Response accuracy
3. Query resolution time
4. User satisfaction scores
5. System uptime and reliability

This document serves as a living reference for Project Minerva's development and can be updated as the project evolves.

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 238 51% 63%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 238 51% 63%;
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 238 51% 63%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 238 51% 63%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-family: var(--font-inter), system-ui, sans-serif;
  }
  h1, h2, h3, h4, h5, h6, .font-serif {
    font-family: var(--font-dm-serif), serif;
    letter-spacing: -0.02em;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { DM_Serif_Text, Inter } from 'next/font/google'
import "./globals.css";

const dmSerifText = DM_Serif_Text({
  subsets: ['latin'],
  weight: ['400'],
  variable: '--font-dm-serif',
})

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
})

export const metadata: Metadata = {
  title: "Minerva - AAR Assistant",
  description: "AI-powered romance book review chatbot",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${dmSerifText.variable} ${inter.variable} font-sans antialiased`}>
        {children}
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
'use client'

import { useChat } from 'ai/react'
import { ChatInterface } from '@/components/chat/ChatInterface'

export default function Page() {
  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({
    api: '/api/chat',
    initialMessages: [],
    onError: (err) => {
      console.error('Chat error:', err);
    }
  });

  return (
    <main className="flex min-h-screen max-h-screen flex-col items-center justify-center p-24">
      <ChatInterface 
        messages={messages}
        input={input}
        handleInputChange={handleInputChange}
        handleSubmit={handleSubmit}
        isLoading={isLoading}
        error={error}
      />
    </main>
  );
}

================
File: components/chat/BookReviewCard.tsx
================
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ExternalLink, Star } from "lucide-react"

interface BookReviewCardProps {
  title: string
  author: string
  grade?: string 
  sensuality?: string
  bookTypes?: string[]
  asin?: string
  reviewUrl?: string
  featuredImage?: string
}

export default function BookReviewCard({
  title,
  author,
  grade,
  sensuality,
  bookTypes = [],
  asin,
  reviewUrl,
  featuredImage
}: BookReviewCardProps) {
  return (
    <Card className="w-full bg-card/50 backdrop-blur">
      <CardHeader className="pb-3">
        <div className="flex gap-4">
          {/* Book Cover */}
          {featuredImage && (
            <div className="flex-shrink-0">
              <img 
                src={featuredImage} 
                alt={`Cover of ${title}`} 
                className="w-24 h-36 object-cover rounded-md shadow-sm border border-border/50"
                style={{ aspectRatio: '2/3' }}
              />
            </div>
          )}
          
          {/* Title and Author */}
          <div className="flex-1 min-w-0">
            <CardTitle className="font-serif text-xl leading-tight mb-1">{title}</CardTitle>
            <p className="text-muted-foreground text-sm">by {author}</p>
          </div>
        </div>
      </CardHeader>

      <CardContent className="grid gap-4 pt-0">
        <div className="flex flex-wrap gap-2">
          {grade && (
            <Badge variant="default" className="bg-primary/10 text-primary hover:bg-primary/20">
              <Star className="w-3 h-3 mr-1 fill-primary" />
              Grade: {grade}
            </Badge>
          )}
          {sensuality && (
            <Badge variant="secondary" className="bg-secondary/50">
              {sensuality}
            </Badge>
          )}
          {bookTypes.map((type) => (
            <Badge key={type} variant="outline" className="border-primary/20">
              {type}
            </Badge>
          ))}
        </div>
        
        <div className="flex flex-wrap gap-2">
          {asin && (
            <Button 
              variant="default"
              size="sm"
              className="gap-2"
              asChild
            >
              <a
                href={`https://www.amazon.com/gp/product/${asin}/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=${asin}&linkCode=as2&tag=allaboutromance`}
                target="_blank"
                rel="noopener noreferrer"
              >
                Buy on Amazon
                <ExternalLink className="w-3 h-3" />
              </a>
            </Button>
          )}
          {reviewUrl && (
            <Button 
              variant="secondary"
              size="sm"
              className="gap-2"
              asChild
            >
              <a
                href={reviewUrl}
                target="_blank"
                rel="noopener noreferrer"
              >
                Read Review
                <ExternalLink className="w-3 h-3" />
              </a>
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: components/chat/ChatInput.tsx
================
"use client"

import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { useRef, useEffect, KeyboardEvent } from "react"
import { Send } from 'lucide-react'

interface ChatInputProps {
  input: string
  handleInputChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void
  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void
  isLoading: boolean
}

export function ChatInput({ input, handleInputChange, handleSubmit, isLoading }: ChatInputProps) {
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const formRef = useRef<HTMLFormElement>(null)

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto'
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`
    }
  }, [input])

  const handleKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      formRef.current?.requestSubmit()
    }
  }

  return (
    <form 
      ref={formRef}
      onSubmit={handleSubmit} 
      className="relative flex items-center gap-2 rounded-xl bg-gradient-to-b from-secondary/50 to-secondary/30 p-2"
    >
      <Textarea
        ref={textareaRef}
        tabIndex={0}
        rows={1}
        value={input}
        onChange={handleInputChange}
        onKeyDown={handleKeyPress}
        placeholder="Ask a follow up..."
        spellCheck={false}
        className="min-h-[44px] w-full resize-none bg-transparent px-4 py-[0.6rem] pr-12 focus-visible:ring-0 focus-visible:ring-offset-0 border-none"
      />
      <Button 
        type="submit" 
        size="icon" 
        variant="ghost" 
        disabled={isLoading}
        className="absolute right-4 transition-colors hover:bg-primary hover:text-primary-foreground"
      >
        <Send className="h-4 w-4" />
        <span className="sr-only">Send message</span>
      </Button>
    </form>
  )
}

================
File: components/chat/ChatInterface.tsx
================
import { useRef, useEffect, useState } from 'react';
import { ChatInput } from './ChatInput';
import { ChatMessage } from './ChatMessage';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { ScrollArea } from '../ui/scroll-area';
import { Sparkles } from 'lucide-react';
import { Message } from 'ai';
import { ChangeEvent } from 'react';

interface ChatInterfaceProps {
  messages: Message[];
  input: string;
  handleInputChange: (e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>) => void;
  handleSubmit: (event?: any) => void;
  isLoading: boolean;
  error?: Error;
}

export function ChatInterface({ 
  messages = [], 
  input, 
  handleInputChange, 
  handleSubmit, 
  isLoading, 
  error 
}: ChatInterfaceProps) {
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const [userScrolled, setUserScrolled] = useState(false);
  const [showScrollButton, setShowScrollButton] = useState(false);

  // Filter out incomplete responses but always show user messages
  const displayMessages = messages.reduce((acc: Message[], curr) => {
    if (curr.role === 'user') {
      return [...acc, curr];
    }
    
    if (curr.role === 'assistant') {
      // Keep complete responses only
      if (!curr.content.trim().startsWith('{') || curr.content.includes('</book-data>')) {
        return [...acc, curr];
      }
    }
    
    return acc;
  }, []);

  // Handle scrolling
  useEffect(() => {
    const scrollArea = scrollAreaRef.current;
    if (!scrollArea) return;

    const handleScroll = () => {
      const { scrollTop, scrollHeight, clientHeight } = scrollArea;
      const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;
      
      setShowScrollButton(!isNearBottom);
      if (isNearBottom) {
        setUserScrolled(false);
      }
    };

    scrollArea.addEventListener('scroll', handleScroll);
    return () => scrollArea.removeEventListener('scroll', handleScroll);
  }, []);

  // Auto-scroll on new messages unless user has scrolled
  useEffect(() => {
    if (!userScrolled && messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ 
        behavior: displayMessages.length <= 2 ? 'auto' : 'smooth',
        block: 'end'
      });
    }
  }, [displayMessages, userScrolled]);

  // Scroll to bottom handler
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    setShowScrollButton(false);
    setUserScrolled(false);
  };

  return (
    <Card className="flex flex-col h-[600px] w-full max-w-2xl mx-auto shadow-lg relative">
      <CardHeader className="border-b bg-primary text-primary-foreground rounded-t-lg">
        <CardTitle className="flex items-center space-x-2 font-serif">
          <Sparkles className="h-6 w-6" />
          <span>Minerva - AAR Assistant</span>
        </CardTitle>
      </CardHeader>

      {/* Fixed container for the latest user message */}
      {displayMessages.length > 0 && displayMessages[displayMessages.length - 1].role === 'user' && (
        <div className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 p-4">
          <div className="flex justify-end">
            <div className="bg-primary text-primary-foreground rounded-lg px-4 py-2 text-sm max-w-[80%]">
              {displayMessages[displayMessages.length - 1].content}
            </div>
          </div>
        </div>
      )}
      
      <CardContent 
        className="flex-1 overflow-hidden p-4" 
        ref={scrollAreaRef}
        onScroll={() => setUserScrolled(true)}
      >
        <ScrollArea className="h-full pr-4">
          {displayMessages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-full text-center space-y-2">
              <p className="text-lg font-medium font-serif">
                Welcome to All About Romance!
              </p>
              <p className="text-sm text-muted-foreground">
                Ask Minerva about romance books, authors, or specific tropes you're interested in.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {displayMessages.slice(0, -1).map((message) => (
                <ChatMessage
                  key={message.id}
                  message={message}
                  isLoading={false}
                />
              ))}
              {/* Show loading state for the last message if loading */}
              {isLoading && (
                <ChatMessage
                  message={{ 
                    id: 'loading', 
                    role: 'assistant', 
                    content: '' 
                  }}
                  isLoading={true}
                />
              )}
              <div ref={messagesEndRef} />
            </div>
          )}
        </ScrollArea>

        {/* Scroll to bottom button */}
        {showScrollButton && (
          <button
            onClick={scrollToBottom}
            className="absolute bottom-20 right-4 bg-primary text-primary-foreground px-4 py-2 rounded-full shadow-lg hover:bg-primary/90 transition-colors"
          >
            Scroll to bottom
          </button>
        )}
      </CardContent>

      <div className="border-t p-4 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <ChatInput
          input={input}
          handleInputChange={handleInputChange}
          handleSubmit={(e) => {
            handleSubmit(e);
            setUserScrolled(false);
            scrollToBottom();
          }}
          isLoading={isLoading}
        />
      </div>
    </Card>
  );
}

================
File: components/chat/ChatMessage.tsx
================
import { Message } from "ai"
import { cn } from "../../lib/utils"
import { Avatar } from "../ui/avatar"
import { Bot, User } from 'lucide-react'
import { useEffect, useState } from "react"
import BookReviewCard from "./BookReviewCard"

const MessageSkeleton = () => (
  <div className="flex items-start gap-4">
    <Avatar className="h-8 w-8 flex-shrink-0">
      <div className="bg-primary text-primary-foreground flex h-full w-full items-center justify-center rounded-full">
        <Bot className="h-4 w-4" />
      </div>
    </Avatar>
    
    <div className="flex-1 max-w-[80%] space-y-4">
      <div className="animate-pulse space-y-4">
        {/* Book card skeleton */}
        <div className="rounded-lg border bg-card p-6">
          <div className="flex gap-4">
            <div className="w-24 h-36 bg-secondary/40 rounded-md"></div>
            <div className="flex-1 space-y-4">
              <div className="h-6 bg-secondary/40 rounded w-3/4"></div>
              <div className="h-4 bg-secondary/40 rounded w-1/2"></div>
              <div className="flex gap-2">
                <div className="h-5 w-16 bg-secondary/40 rounded-full"></div>
                <div className="h-5 w-20 bg-secondary/40 rounded-full"></div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Text content skeleton */}
        <div className="space-y-3 p-4 bg-secondary/20 rounded-lg">
          <div className="h-4 bg-secondary/40 rounded w-3/4"></div>
          <div className="h-4 bg-secondary/40 rounded w-1/2"></div>
        </div>
      </div>
    </div>
  </div>
);

interface ChatMessageProps {
  message: Message;
  isLoading?: boolean;
}

interface Book {
  title: string;
  author: string;
  grade: string;
  sensuality: string;
  bookTypes?: string[];
  asin?: string;
  reviewUrl?: string;
  comments?: {
    count: number;
    highlights?: string[];
  };
}

export function ChatMessage({ message, isLoading }: ChatMessageProps) {
  const [processedContent, setProcessedContent] = useState<{
    books: Book[] | null;
    content: string | null;
  } | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  useEffect(() => {
    if (!message.content) return;

    // Skip processing if the content looks like incomplete JSON
    if (message.content.trim().startsWith('{') && !message.content.includes('</book-data>')) {
      return;
    }

    setIsProcessing(true);
    
    try {
      const result = processMessageContent(message.content);
      setProcessedContent(result);
    } catch (error) {
      console.error('Error processing message:', error);
    } finally {
      setIsProcessing(false);
    }
  }, [message.content]);

  // Show loading skeleton only when explicitly loading or processing
  if (isLoading || isProcessing) {
    return <MessageSkeleton />;
  }

  // Don't render anything for incomplete JSON messages
  if (message.role === 'assistant' && message.content.trim().startsWith('{')) {
    return null;
  }

  return (
    <div className={cn(
      "group relative flex w-full items-start gap-4 py-2",
      message.role === "user" ? "justify-end" : "justify-start"
    )}>
      {message.role !== "user" && (
        <Avatar className="h-8 w-8 flex-shrink-0">
          <div className="bg-primary text-primary-foreground flex h-full w-full items-center justify-center rounded-full">
            <Bot className="h-4 w-4" />
          </div>
        </Avatar>
      )}
      
      <div className={cn(
        "flex-1",
        message.role === "user" ? "max-w-[80%] flex justify-end" : "max-w-[80%]"
      )}>
        {message.role === "user" ? (
          <div className="bg-primary text-primary-foreground rounded-lg px-4 py-2 text-sm">
            {message.content}
          </div>
        ) : processedContent ? (
          <div className="space-y-4">
            {processedContent.books?.map((book: Book, index: number) => (
              <BookReviewCard key={index} {...book} />
            ))}
            
            {processedContent.content && (
              <div 
                className="rounded-lg px-4 py-2 text-sm leading-relaxed bg-secondary space-y-2 prose prose-sm max-w-none"
                dangerouslySetInnerHTML={{ __html: processedContent.content }}
              />
            )}
          </div>
        ) : null}
      </div>

      {message.role === "user" && (
        <Avatar className="h-8 w-8 flex-shrink-0">
          <div className="bg-muted flex h-full w-full items-center justify-center rounded-full">
            <User className="h-4 w-4" />
          </div>
        </Avatar>
      )}
    </div>
  );
}

function processMessageContent(content: string) {
  // Extract book data
  const bookMatch = content.match(/<book-data>([\s\S]*?)<\/book-data>/);
  let books = null;
  let cleanContent = content;
  
  if (bookMatch) {
    try {
      books = JSON.parse(bookMatch[1]).books;
      cleanContent = content.replace(/<book-data>[\s\S]*?<\/book-data>/, '').trim();
    } catch (error) {
      console.error('Error parsing book data:', error);
    }
  }

  // Format the remaining content
  cleanContent = cleanContent
    .replace(/\[([^\]]+)\]\(([^\)]+)\)/g, '<a href="$2" target="_blank" class="text-primary hover:underline">$1</a>')
    .replace(/\*\*(.*?)\*\*/g, '<b>$1</b>')
    .replace(/\_(.*?)\_/g, '<i>$1</i>')
    .replace(/^>\s*(.*?)$/gm, '<blockquote class="border-l-4 border-primary/20 pl-4 italic text-muted-foreground">$1</blockquote>')
    .split('\n\n')
    .map(p => p.trim())
    .filter(p => p)
    .map(p => `<p>${p}</p>`)
    .join('\n');

  return {
    books,
    content: cleanContent
  };
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: lib/validators/book-data.ts
================
import { z } from 'zod';

// Book data validation schema
const BookSchema = z.object({
  title: z.string().min(1, "Title is required"),
  author: z.string().min(1, "Author is required"),
  grade: z.string().regex(/^[A-F][+-]?$/, "Invalid grade format"),
  sensuality: z.enum(["Burning", "Hot", "Warm", "Subtle", "Kisses"]),
  bookTypes: z.array(z.string()).min(1, "At least one book type is required"),
  asin: z.string().regex(/^[0-9A-Z]{10}$/, "Invalid ASIN format"),
  reviewUrl: z.string().url("Invalid review URL"),
  featuredImage: z.string(),
  synopsis: z.string().optional(),
  comments: z.object({
    count: z.number().int().nonnegative(),
    highlights: z.array(z.string()).optional()
  }).optional()
});

export const BookDataSchema = z.object({
  books: z.array(BookSchema).min(1, "At least one book is required")
});

export function validateBookData(content: string): { 
  isValid: boolean; 
  data?: z.infer<typeof BookDataSchema>;
  error?: string 
} {
  try {
    // Extract book data
    const match = content.match(/<book-data>([\s\S]*?)<\/book-data>/);
    if (!match) {
      return { 
        isValid: false, 
        error: "Missing book-data structure" 
      };
    }

    // Parse JSON
    const json = JSON.parse(match[1]);
    
    // Validate against schema
    const result = BookDataSchema.safeParse(json);
    
    if (!result.success) {
      return {
        isValid: false,
        error: result.error.errors.map(e => e.message).join(", ")
      };
    }

    return {
      isValid: true,
      data: result.data
    };
  } catch (error) {
    return {
      isValid: false,
      error: error instanceof Error ? error.message : "Invalid book data"
    };
  }
}

// Optional: Helper function to format error messages for display
export function formatValidationError(error: string): string {
  return `⚠️ Response validation failed: ${error}. This has been logged for improvement.`;
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: types/chat.ts
================
import { Message as AIMessage } from 'ai';

export interface ReviewMetadata {
  bookTitle: string;
  authorName: string;
  grade: string;
  sensuality: string;
  bookTypes?: string[];
  reviewTags?: string[];
  text: string;
}

export interface PineconeMatch {
  id: string;
  score: number;
  metadata?: ReviewMetadata;
}

export type Message = AIMessage;

export interface ChatProps {
  initialMessages?: Message[];
  id?: string;
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "minerva",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.0.5",
    "@pinecone-database/pinecone": "^4.0.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-scroll-area": "^1.2.1",
    "@radix-ui/react-slot": "^1.0.2",
    "ai": "^4.0.6",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.309.0",
    "minimatch": "^3.1.2",
    "next": "14.1.0",
    "openai": "^4.73.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-intersection-observer": "^9.13.1",
    "repomix": "^0.2.5",
    "tailwind-merge": "^2.5.5"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: postcss.config.mjs
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Project Minerva: AI-Powered Romance Book Review Chatbot

## Project Overview
Project Minerva is an intelligent chatbot system designed specifically for All About Romance, a WordPress-based romance book review platform. The chatbot aims to enhance user engagement by providing natural, context-aware conversations about romance books, reviews, and recommendations.

## Core Objectives
1. Create an intuitive, conversational interface for exploring romance book reviews
2. Integrate seamlessly with existing WordPress infrastructure
3. Provide accurate, context-aware responses to user queries
4. Scale efficiently to handle growing user interactions
5. Maintain conversation history and context for meaningful interactions

## Key Features

### 1. Natural Language Understanding
- Process and understand user queries about books, authors, and reviews
- Handle complex questions about plot elements, character dynamics, and themes
- Support follow-up questions and maintain conversation context
- Example queries:
  - "What are the best enemies-to-lovers romances from 2024?"
  - "Find me books similar to 'The Love Hypothesis'"
  - "What did reviewers say about the character development in this book?"

### 2. Review Integration
- Access and analyze existing book reviews from the WordPress database
- Incorporate user comments and ratings into responses
- Provide balanced perspectives from multiple reviews
- Generate comprehensive summaries of review content

### 3. Recommendation Engine
- Suggest similar books based on user preferences
- Filter recommendations by subgenre, tropes, heat level, etc.
- Consider review ratings and user feedback in suggestions
- Provide personalized reading lists

### 4. WordPress Integration
- Seamless embedding in WordPress pages and posts
- Real-time access to review database
- Consistent styling with website theme
- Mobile-responsive design

## Technical Architecture

### Frontend Stack
1. **Next.js 14**
   - App Router for routing
   - Server Components for optimal performance
   - API Routes for backend functionality
   - Tailwind CSS for styling
   - TypeScript for type safety

2. **UI Components**
   - Shadcn/ui for core components
   - Custom chat interface
   - Loading states and animations
   - Error handling and feedback

### Backend Services

1. **LangChain Framework**
   - RAG (Retrieval-Augmented Generation) implementation
   - Conversation chain management
   - Context window optimization
   - Memory management for chat history

2. **Vector Database (Pinecone)**
   - Store and retrieve review embeddings
   - Semantic search capabilities
   - Real-time updates for new content
   - Efficient similarity search

3. **WordPress Integration**
   - WPGraphQL plugin for data access
   - Custom post type for reviews
   - Real-time content synchronization
   - User authentication integration

### Data Flow
1. Content Processing
   ```
   WordPress Reviews → Vector Embeddings → Pinecone DB
   ```

2. Query Processing
   ```
   User Query → LangChain → Vector Search → LLM → Response
   ```

3. Context Management
   ```
   Chat History → Memory System → Context Window → Response Generation
   ```

## Development Phases

### Phase 1: Foundation
- Set up Next.js project structure
- Implement basic chat interface
- Configure WordPress GraphQL integration
- Set up development and staging environments

### Phase 2: Core Features
- Implement RAG system with LangChain
- Set up vector database and embeddings
- Create basic conversation flows
- Develop review parsing system

### Phase 3: Enhancement
- Add advanced query handling
- Implement recommendation system
- Optimize response generation
- Add error handling and fallbacks

### Phase 4: WordPress Plugin
- Develop WordPress plugin
- Create admin interface
- Implement configuration options
- Add analytics and monitoring

## Deployment Strategy
1. **Frontend**
   - Vercel for Next.js application
   - Automated deployments from GitHub
   - Environment variable management
   - Performance monitoring

2. **Backend Services**
   - Serverless functions for API endpoints
   - Vector database hosting
   - WordPress plugin distribution
   - Backup and recovery systems

## Monitoring and Maintenance
- Track user interactions and feedback
- Monitor system performance
- Regular updates to vector database
- Continuous improvement of responses

## Security Considerations
- User data protection
- API key management
- Rate limiting
- Error logging and monitoring
- GDPR compliance

## Future Enhancements
1. User preference learning
2. Multi-language support
3. Voice interface
4. Advanced analytics dashboard
5. Integration with e-commerce systems

## Project Constraints
- API rate limits
- Content freshness
- Response time requirements
- Resource optimization
- Cost management

## Success Metrics
1. User engagement rates
2. Response accuracy
3. Query resolution time
4. User satisfaction scores
5. System uptime and reliability

This document serves as a living reference for Project Minerva's development and can be updated as the project evolves.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss"

const config = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['var(--font-inter)', 'system-ui', 'sans-serif'],
        serif: ['var(--font-dm-serif)', 'serif'],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@tailwindcss/typography")
  ],
} satisfies Config

export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
